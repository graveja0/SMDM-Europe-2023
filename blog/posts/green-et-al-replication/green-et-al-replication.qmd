---
title: "Basic Markov Modeling in R"
subtitle: "Replication of Green et al (2023) Results"
editor: source
editor_options: 
  chunk_output_type: console
bibliography: ../../../slides/references.bib
execute: 
  cache: false
---

# Introduction

The objective of this posting is to provide R code that replicates the model and results in @green2023health.

@green2023health provide a [link to the Excel file](https://github.com/Excel-R-tutorials/Markov-model-introduction/blob/ea65640a064d9d01f56295cbbab90ab4865c38fc/original_Excel_files/Media_343196_smxx.xlsm) as well as [code to execute the same model in R](https://github.com/Excel-R-tutorials/Markov-model-introduction/blob/main/Markov_model_realworld.R). The R code is written in base R, meaning that it does not require any loaded packages to execute. However, the model structure is somewhat complicated--requiring, for example, both state occupancy and transitions out of certain states to be tracked.[More specifically, in the @green2023health model there is an additional cost from transitioning from Progressive disease to death, but this cost does not apply if the cause of death was background mortality. This is straighforward to track when the calculations are done cycle-by-cycle, as in the original Excel file and R code. However, this type of dynamic is not easily captured in a generalized approach to modeling---as we aim to build here---unless the specific health states are separately defined in the model. Our adaptation to the code generalizes the modeling process but does not change the results.]{.aside}

The code provided below replicates the original model, but draws on various capabilities within the (now ubiquitous) `tidyverse` universe to both simplify and generalize the execution process; this will become useful in the workshop when we augment the model with additional health states, new evidence, etc.

The original model is structured as follows:

<div>

<a href='//sketchviz.com/@graveja0/87115c93ff6ac666674b88e1b30aec15'><img src="https://sketchviz.com/@graveja0/87115c93ff6ac666674b88e1b30aec15/696391f92d96cd0be0fe09157ba6247d0dd84cc9.sketchy.png" style="max-width: 100%;"/></a><br/>[Created on <a href='//sketchviz.com/' style='color:#555;'>Sketchviz</a>]{style="font-size: 80%;color:#555;"}

</div>

In this model, individuals can cycle into the death state in one of two ways:

-   From the Asymptomatic state, in which case the probability of death is goverened by age-dependent mortality probabilities.
-   From the Progressive Disease state, in which case the probability of death is govered both by age-dependent mortality, as well as a heightened probability of death from the disease.

To simplify and generalize the code required to execute the model we will make a slight adaptation to the model structure and seaprate out death from Progressive disease and death from background causes. The adapted model diagram is provided below.

<div>

<a href='//sketchviz.com/@graveja0/27cb6a8afd59496135e83cd52894349a'><img src="https://sketchviz.com/@graveja0/27cb6a8afd59496135e83cd52894349a/9a3873291c108c030b908711a4c353aa9deb0a38.sketchy.png" style="max-width: 100%;"/></a><br/>[Hosted on <a href='//sketchviz.com/' style='color:#555;'>Sketchviz</a>]{style="font-size: 80%;color:#555;"}

</div>

The only other adaptation to the model we will make is to set the discount rates to 0.

```{r setup}
#| echo: false
#| warning: false
#| message: false
library(tidyverse)
library(demography)
library(MortalityLaws)
library(directlabels)
library(ggsci)
library(hrbrthemes)
library(MASS)
library(mgcv)
library(patchwork)
library(knitr)
library(kableExtra)
library(here)
library(ggsci)
library(expm)
library(glue)
select =dplyr::select
options("scipen" = 100, "digits" = 5)
```

# Parameterize

```{r}
params = list(
    t_names = c("without_drug", "with_drug"),   # Treatment names
    n_treatments =2, # Number of treatments
    s_names  = c("Asympt", "Progressive", "DeadCause","Dead"), # State names
    n_states = 4, # Number of states
    
    a_names = c("accProgressive"),       # <1>
    tunnel_names = c("trProgressive","trDeadCause"),  # <2>
    
    n_cohort =1000, # Cohort size
    cycle = 1, # Cycle length
    
    Initial_age = 55,  # Cohort starting age
    effect = 0.5,  # Treatment Effect (drug) 
    
    cAsymp =500,   # Cost of asympomatic state
    cDeath =1000,  # cost of death (progressive disease state only)
    cDrug =1000,   # Cost of drug
    cProg =3000,   # Cycle cost of progressive disease
    uAsymp =0.95, # Asymptomatic state utility
    uProg =0.75,  # Progressive disease state utility
    oDr = 0, #0.06,  # Discount rate (QALYs)
    cDr = 0, #0.06,  # Discount rate (costs)
    tpDcm =0.15,  # Death from progressive disease trans prob
    tpProg =0.01, # Transition prob: progressive disease
    tpDn =0.0379  # Background mortality transition prob
)
params <- modifyList(params,list(    n_cycles = 46/params$cycle))
```

Our next objective is to define a function that constructs the time-dependent transition probability matrices.

```{r}

mPt <- function(t, params) {
    lapply(t, function(tt){
        
        current_age <- params$Initial_age  +  (tt)*params$cycle - 1 

        tpDn_lookup <-
            c("(34,44]" = 0.0017,
              "(44,54]" = 0.0044,
              "(54,64]" = 0.0138,
              "(64,74]" = 0.0379,
              "(74,84]" = 0.0912,
              "(84,100]" = 0.1958)
        
        age_grp <- cut(current_age, 
                       breaks = c(34,44,54,64,74,84,100))
        
        tpDn <- tpDn_lookup[age_grp]
        tpProg_ <- params$tpProg * (tt * params$cycle )
        tpDcm_ <- params$tpDcm 
        
        rDn <- -log(1 - tpDn)
        rProg_ <- -log(1 - tpProg_)
        rDcm_ <- -log(1 - tpDcm_)
        
        tpDn <- 1 - exp(-rDn * params$cycle)
        tpProg_ <- 1 - exp(-rProg_ * params$cycle)
        tpDcm_ <- 1 - exp(-rDcm_ * params$cycle)
        
        
        effect_ <- params$effect
        n_states_ <- params$n_states
        s_names_ <- params$s_names
        t_names_ <- params$t_names
        n_treatments_ <- params$n_treatments
        
        mP_ <- 
            array(data = c(0, 0, 0,0,
                           tpProg_, 0, 0,0,
                           0,tpDcm_,0,0,
                           tpDn , tpDn, 0,0,
                           
                           0, 0, 0,0,
                           tpProg_*(1-effect_), 0, 0,0,
                           0,tpDcm_,0,0,
                           tpDn, tpDn,0, 0),
                  dim = c(n_states_, n_states_, n_treatments_),
                  dimnames = list(from = s_names_,
                                  to = s_names_,
                                  t_names_))
        diag(mP_[,,1]) <-  # Diagonal of transition probability matrix is 1 minus off-diagonal sum
            1 - rowSums(mP_[,,1])
        diag(mP_[,,2]) <- 
            1 - rowSums(mP_[,,2])
        
        mP <- # This turns the named array into a simpler list object
            apply(mP_,3,function(x) x, simplify = FALSE)

        return(mP)
    })
}
```

# Cohort Simulation Function

We next define a function that takes as its input the parameters.

```{r sim_cohort}
sim_cohort <- function(params) {
    
    mP <- mPt(1:(params$n_cycles-1),params) # <1>
    
    tr <-  # <2>
        mP %>% transpose() %>% 
        map(~({
            tr_ <- t(c("Asymptomatic_disease" = params$n_cohort, "Progressive_disease" = 0, "DeadCause" = 0, "Dead" = 0))
            do.call(rbind,lapply(.x, function(tp) {
                tr_ <<- tr_ %*% tp
            }))
        }))
    tr <-  
        tr %>% 
        map(~({
            .x <- rbind(t(c(params$n_cohort,0,0,0)),.x)
        }))
    
    arr <-  # <3>
        mP %>% transpose() %>% 
        map(~({
            tr_ <- t(c("Asymptomatic_disease" = params$n_cohort, "Progressive_disease" = 0, "DeadCause" = 0, "Dead" = 0))
            arr_ <- diag(as.vector(tr_))
            do.call(rbind,lapply(.x, function(tp) {
                tr_ <<- tr_ %*% tp
                arr_ <<- diag(as.vector(tr_)) %*% tp
                arr_
            }))
        }))
    arr <- 
        arr %>% 
        map(~({
            .x <- rbind(diag(c(params$n_cohort,0,0,0)),.x)
        }))
    
    arr <- arr %>% map(~({
        .x %>% data.frame() %>% 
            mutate(cycle = sort(rep(1:params$n_cycles,params$n_states))) %>% 
            group_by(cycle) %>% 
            nest()
    }))
    
    return(list(trace = tr, array = arr))
}

markov_result <- # <4> 
    sim_cohort(params)

```

1.  Calculate the transition probability matrices.
2.  Construct the Markov trace
3.  Construct a multidimensional transition array (see @krijkamp2020multidimensional for more). The transition array result isn't used in this particular example, but can provide useful information on transition dynamics for each cycle.
4.  Execute the function to simulate the cohort for the given parameters.

```{r}
lapply(markov_result$trace , function(x) round(x,3))
```

## Define Payoffs

```{r payoffs}
u_payoff <- with(params,{
    array(c("Asymptomatic_disease" = uAsymp, "Progressive_disease" = uProg, "DeadCause" = 0, "Dead" = 0, 
            "Asymptomatic_disease" = uAsymp, "Progressive_disease" = uProg,  "DeadCause" = 0, "Dead" = 0 ),
          dim = c(1, n_states, n_treatments),
          dimnames = list(from = "qaly",
                          to = c(s_names),
                          t_names))
    }) %>% 
         apply(.,3,function(x) t(x), simplify = FALSE)
u_payoff

c_state_payoff <- with(params,{
    array(c("Asymptomatic_disease" = cAsymp, "Progressive_disease" = cProg, "DeadCause" = 0 , "Dead" = 0, 
            "Asymptomatic_disease" = cAsymp+cDrug, "Progressive_disease" = cProg, "DeadCause" = 0 , "Dead" = 0 ),
          dim = c(1, n_states, n_treatments),
          dimnames = list(from = "cost",
                          to = c(s_names),
                          t_names))
    }) %>% 
        apply(.,3,function(x) t(x), simplify = FALSE)
c_state_payoff

c_transition_payoff <- with(params,{
    array(c("Asymptomatic_disease" = 0, "Progressive_disease" = 0, "DeadCause" = cDeath , "Dead" = 0, 
            "Asymptomatic_disease" = 0, "Progressive_disease" = 0, "DeadCause" = cDeath , "Dead" = 0 ),
          dim = c(1, n_states, n_treatments),
          dimnames = list(from = "transition_cost",
                          to = c(s_names),
                          t_names))
    }) %>% 
        apply(.,3,function(x) t(x), simplify = FALSE)
c_transition_payoff
```

```{r}
qaly_unadj <- # .x[-1,] because we don't count the cycle with the full cohort in asymptomatic
    map2(markov_result$trace, u_payoff,  ~ ({
        .x[-1,] %*% .y
    })) %>% 
    set_names(params$t_names)

cost_state_unadj <- 
    map2(markov_result$trace, c_state_payoff, ~({
        .x[-1,] %*% .y
    })) %>% 
    set_names(params$t_names)

cost_transition_unadj <- 
    map2(markov_result$trace, c_state_payoff, ~({
         matrix(c(0,diff(.x[-1,"DeadCause"]))) * params$cDeath
    })) %>% 
    set_names(params$t_names)
    
cost_unadj <- map2(cost_state_unadj, cost_transition_unadj, ~(.x + .y))

```

# Summarize

## Discounting

```{r discounting}
discounting_cost <- 
    1/(1+params$cDr)^(0:(params$n_cycles-2))
discounting_outcome <- 
    1/(1+params$oDr)^(0:(params$n_cycles-2))
```

## Total Cost and QALY Calculation (No Cycle Adjustment)

```{r}
#| tbl-cap: R Model Results
#| tbl-cap-location: bottom
tot_cost <- 
    map(cost_unadj, ~(sum(.x * discounting_cost )/params$n_cohort))  %>% 
    set_names(params$t_names)
tot_qaly <- 
    map(qaly_unadj, ~(sum(.x * discounting_outcome )/params$n_cohort)) %>% 
    set_names(params$t_names)

diff_cost <- 
    tot_cost$with_drug - tot_cost$without_drug
diff_qaly <- 
    tot_qaly$with_drug - tot_qaly$without_drug

cbind.data.frame(cbind(tot_qaly),cbind(tot_cost))  %>% 
    set_names(c("Eff","Cost")) %>% 
    data.frame() %>% 
    rbind.data.frame("difference" = data.frame(Eff = round(diff_qaly,2), Cost = round(diff_cost,0))) %>% 
    mutate(ICER = c("","",paste0(round(diff_cost / diff_qaly,0)))) %>% 
    kable(digits = c(0,0,0)) %>% 
    kable_styling()
```

![Excel Model Results](attr/images/excel-icer.png){fig-align="center" height="200px"}

## Total Cost and QALY Calculation (With Cycle Adjustment)

```{r}
alt_simp_coef <- function(i) c(17, 59, 43, 49, rep(48, i-8), 49, 43, 59, 17) / 48 # <1>
cycle_adj <- alt_simp_coef(params$n_cycles-1) # <3>
```

1.  Alternative Simpson's method coefficients
2.  Specify the cycle-specific adjustment factors for the model.

```{r}
#| tbl-cap: R Model Results
#| tbl-cap-location: bottom
tot_cost_cadj <- 
    map(cost_unadj, ~(sum(.x * discounting_cost * cycle_adj )/params$n_cohort))  %>% 
    set_names(params$t_names)
tot_qaly_cadj <- 
    map(qaly_unadj, ~(sum(.x * discounting_outcome * cycle_adj )/params$n_cohort)) %>% 
    set_names(params$t_names)

diff_cost_cadj <- 
    tot_cost_cadj$with_drug - tot_cost_cadj$without_drug
diff_qaly_cadj <- 
    tot_qaly_cadj$with_drug - tot_qaly_cadj$without_drug

cbind.data.frame(cbind(tot_qaly_cadj),cbind(tot_cost_cadj))  %>% 
    set_names(c("Eff","Cost")) %>% 
    data.frame() %>% 
    rbind.data.frame("difference" = data.frame(Eff = round(diff_qaly_cadj,2), Cost = round(diff_cost_cadj,0))) %>% 
    mutate(ICER = c("","",paste0(round(diff_cost / diff_qaly,0)))) %>% 
    kable(digits = c(0,0,0)) %>% 
    kable_styling()
```
