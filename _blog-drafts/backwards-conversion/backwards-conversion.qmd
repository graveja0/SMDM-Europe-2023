---
title: "Backwards Conversion"
editor_options: 
  chunk_output_type: console
---

```{r}
#| message: false
#| warning: false
library(tidyverse)
library(knitr)
library(kableExtra)
library(survival)
library(flexsurv)
library(haven)
library(dampack)
library(Matrix)
library(here)
library(glue)
library(demography)
library(glue)
library(MortalityLaws)
library(demography)
library(MASS)
library(directlabels)
library(markovchain)
library(expm)

options("scipen" = 100, "digits" = 5)

select <- dplyr::select
theme_set(hrbrthemes::theme_ipsum(base_family = "Arial"))
```

What if a given source of data provides observed transition probabilities and these are exclusionary states, i.e., competing? How could one reverse these probabilities and embed other competing events into the model?

To do this, one must solve for the generator matrix of the transition probability matrix using eigenvalue decomposition. Note that this is not always possible, as it is trivial to construct a transition probability matrix that has no generator.

Consider the following, which builds on the example provided in the main text. We wish to approximate a continuous time process using a discrete-time Markov model with three distinct states: A (healthy), B (sick/intervention), and C (complication from intervention). Moreover, in continuous time, this process proceeds sequentially, i.e., A-\>B-\>C.

A (naively) specified model has transitions from A-\>B and from B-\>C specified as probabilities within the selected time step. As noted in the main text, this model cannot truly approximate continuous time process, as within a given time step there is a non-zero probability of transitioning from healthy to complication (i.e., A-\>C, with an implied sojourn through B). That is, during a timestep it is possible to transition from A-\>C.

By incorrectly specifying all transitions, it makes it impossible to find a proper generator---though eigenvalue decomposition can be used to get as close as possible. If negative rates of transition are found using eigenvalue decomposition, then probabilities inconsistent with continuous rates have been specified.

In mathematical terms, the generator matrix is the matrix logarithm of the transition probability matrix. A matrix has a logarithm *if and only if* if it is invertible.

$$ A = \log T_{prob} $$

The $\log$ can be found using spectral or eigenvalue decomposition. If $V$ is a matrix where equal column is an eigenvector of $T_{prob}$, then,

$$A' = V^{-1} A V$$ $$\log T_{prob} = V (\log A') V^{-1}$$

### Can I Work Backwards from Transition Probabilities? An Example.

As an example, we'll consider a model from "Decision Modelling for Heath Economic Evaluation" by Briggs, Clatxon, and Sculpher. In Table 2.2, they define a transition probability matrix for HIV monotherapy that was derived from observed percent transitions in a patient cohort.

```{r}
mP <- matrix(c(0.721, 0.202, 0.067, 0.010,
                0.000, 0.581, 0.407, 0.012,
                0.000, 0.000, 0.750, 0.250,
                0.000, 0.000, 0.000, 1.000), 
              nrow=4, byrow=TRUE,
              dimnames=list(c("A", "B", "C", "D"),
                            c("A", "B", "C", "D")))
mP 
```

The bottom diagonal was corrected to be a Markov absorbing state by having 1 on the diagonal. For the purposes of example, we'll assume we wish to add an additional state "E", which has a continuous rate of 0.2 that competes with other transitions.

To accomplish this we must find the continuous generator.

```{r}
V  <- eigen(mP)$vectors
iV <- solve(V)
Ap <- iV %*% mP %*% V

Ap
```

Due to the numeric probabilities not being exactly correct, the off-diagonal elements of $A'$ are not zero, but they are quite close. We will zero these off diagonal elements and assume that the non-zero elements are numerical error. Then continue by taking the log of the diagonal.

```{r}
lAp <- diag(log(diag(Ap)), nrow(Ap), ncol(Ap))

R  <- V %*% lAp %*% iV

R 
```

An now we have the continuous time rate generator for the Markov Model. There is still some numerical error---for example the bottom row, has values very near to zero, and the diagonal is not exactly the negative sum of the rest of the row. We can clean this up by tweaking the numbers numerical towards their constraints.

```{r}
R[abs(R) < 1e-6 ] <- 0


rownames(R) <- c("A", "B", "C", "D")
colnames(R) <- c("A", "B", "C", "D")

round(R, 3)
```

Some numerical error is inevitable in this process and cannot be avoided. However, even cleaning up the small and obvious errors, the transition from B -\> D is impossible since it's negative. Rates are relative to the occupancy of the source state, in this case B. Having a negative rate implies that B would have some transitions in which the dead come alive into B based upon the occupancy of B. Obviously, this is not possible. The problem now is how to adjust the model's rates to be physically possible, while as faithful to the original data as possible. B is a sicker state, so it should have a higher death rate.

First, let's double check it recapitulates the original rates.

```{r}
expm(R)
```

Which exactly matches the original transition probability table given.

## Alternative Approach

The theoretical approach requires computation of the eigenvalues of the matrix, and then correction along the way for various numerical errors to derive the generator matrix of rates. The observed statistical error from a stochastic process in general create a situation in which the Q-matrix is not derivable theoretically resulting in negative probabilities. Finding the closest generator matrix can be done using Higham's 2008 method from \`Functions of Matrices: Theory and Computation' with extra balancing options from Stadelmann's thesis.

```{r}

R <- transition2Generator(mP)
rownames(R) <- c("A", "B", "C", "D")
colnames(R) <- c("A", "B", "C", "D")
R
```

Note: this is the closest Markov model allowing any transition. There are still transitions from A-\>C and A-\>D. Notably B-\>D occurs at a negative rate. If D were representing an absorbing state, e.g. Death, then this would represent a physical impossibility, as this negative rate represents D -\> B.

## Demonstrate that the embedded (new) transition probability matrix successfully recreates the original transition probability matrix and results.

Let's double check it recapitulates the original rates.

```{r}
round(expm(R),3)
```

## An assumed model

If one were to assume that all transitions were forward , i.e. A-\>B-\>C-\>D the best approach would be to fit the generator matrix directly from raw data (there are many statistical Markov and ordinal data fitting models). Without the raw data available, an ad-hoc method to minimize squared error against the original under the 3 rate constraint does a decent job of recapitulating the original transition probabilities.

```{r, eval = FALSE}
init  <- c(1/3, 1/3, 1/3, 0)
step1 <- init %*% mP
m_3r <- function(r)
    matrix(c(-(r[1]+r[4]+r[5]),  r[1],      r[4],    r[5],
                 0, -(r[2]+r[6]),   r[2],    r[6],
                 0,     0,  -r[3], r[3],
                 0,     0,      0,   0), nrow=4, byrow=TRUE)
r.est <- optim((-diag(R))[1:3],
      lower=c(0.1, 0.1, 0.1),
      method="L-BFGS-B",
      function(r) {
      sum( ((init %*% expm(m_3r(r))) - step1)^2 )
})$par
m_3r(r.est)
round(expm(m_3r(r.est)),3)
```

```{r, eval = FALSE}
mP_ <- mP
diag(mP_) = 0
mR_ <- apply(mP_,c(1,2),function(x)-log(1-x))
diag(mR_) <- -rowSums(mR_)
expm(mR_)

list("eigen" = R,
     "m_3r" = m_3r(r.est),
     "form" = mR_)


```
