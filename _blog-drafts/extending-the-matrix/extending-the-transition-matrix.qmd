---
title: "Extending the Transition Matrix"
subtitle: "Including Non-Markovian Accumulators and Transition States"
editor: visual
editor_options: 
  chunk_output_type: console
bibliography: ../../../slides/references.bib
execute: 
  cache: false
---

# Introduction

<div>

<a href='//sketchviz.com/@graveja0/27cb6a8afd59496135e83cd52894349a'><img src="https://sketchviz.com/@graveja0/27cb6a8afd59496135e83cd52894349a/295cccb1b92d82caab9838e779475eaff93e7461.sketchy.png" style="max-width: 200%;"/></a><br/>[Hosted on <a href='//sketchviz.com/' style='color:#555;'>Sketchviz</a>]{style="font-size: 80%;color:#555;"}

</div>

```{r setup}
#| echo: false
#| warning: false
#| message: false
library(tidyverse)
library(demography)
library(MortalityLaws)
library(directlabels)
library(ggsci)
library(hrbrthemes)
library(MASS)
library(mgcv)
library(patchwork)
library(knitr)
library(kableExtra)
library(here)
library(ggsci)
library(expm)
library(glue)
select =dplyr::select
options("scipen" = 100, "digits" = 5)
```

# Parameterize

```{r}
params = list(
    t_names = c("without_drug", "with_drug"),   # Treatment names
    n_treatments =2, # Number of treatments
    s_names  = c("Asympt", "Progressive", "DeadCause","Dead"), # State names
    n_states = 4, # Number of states
    
    a_names = c("accProgressive"),       # <1>
    tunnel_names = c("trProgressive","trDeadCause"),  # <2>
    
    n_cohort =1000, # Cohort size
    cycle = 1, # Cycle length
    
    n_cycles = 46, # Total number of cycles
    Initial_age = 55,  # Cohort starting age
    effect = 0.5,  # Treatment Effect (drug) 
    
    cAsymp =500,   # Cost of asympomatic state
    cDeath =1000,  # cost of death (progressive disease state only)
    cDrug =1000,   # Cost of drug
    cProg =3000,   # Cycle cost of progressive disease
    uAsymp =0.95, # Asymptomatic state utility
    uProg =0.75,  # Progressive disease state utility
    oDr = 0, #0.06,  # Discount rate (QALYs)
    cDr = 0, #0.06,  # Discount rate (costs)
    tpDcm =0.15,  # Death from progressive disease trans prob
    tpProg =0.01, # Transition prob: progressive disease
    tpDn =0.0379  # Background mortality transition prob
)
```

1.  Accumulators
2.  Transition tracker

Our next objective is to define a function that constructs the time-dependent transition probability matrices.

```{r}
t = 1:params$n_cycles
tt = params$n_cycles

mPt <- function(t,params) {
    lapply(t, function(tt){
        
        current_age <- params$Initial_age  + (tt)*params$cycle - 1
        cycle = (tt)*params$cycle
        
        tpDn_lookup <-
            c("(34,44]" = 0.0017,
              "(44,54]" = 0.0044,
              "(54,64]" = 0.0138,
              "(64,74]" = 0.0379,
              "(74,84]" = 0.0912,
              "(84,100]" = 0.1958)
        
        age_grp <- cut(current_age, 
                       breaks = c(34,44,54,64,74,84,100))
        tpDn <- tpDn_lookup[age_grp]
        
        tpProg_ <- params$tpProg * (cycle)
        tpDcm_ <- params$tpDcm 
        effect_ <- params$effect
        n_states_ <- params$n_states
        s_names_ <- params$s_names
        t_names_ <- params$t_names
        n_treatments_ <- params$n_treatments
        
        mR_ <- 
            array(data = c(0, 0, 0,0,
                                   -log(1-tpProg_), 0, 0,0,
                                   0,-log(1-tpDcm_),0,0,
                           -log(1 - tpDn),  -log(1 - tpDn), 0,0,
                           
                                   0, 0, 0,0,
                                   -log(1-(tpProg_*(1-effect_))), 0, 0,0,
                                   0,-log(1-tpDcm_),0,0,
                           -log(1 - tpDn),  -log(1 - tpDn),0, 0),
                          dim = c(n_states_, n_states_, n_treatments_),
                          dimnames = list(from = s_names_,
                                          to = s_names_,
                                          t_names_))

        mR_ <- apply(mR_,3,function(x){
            diag(x) <- -rowSums(x)
            x
        },simplify=FALSE)
        
        ###############################
        # Add Non-Markovian Components
        ###############################
        
        mR <- lapply(mR_,function(x){
            r_ <- nrow(x)
            add_ <- length(params$a_names)   + length(params$tunnel_names) + 1
            
            new_row_names <- c(rownames(x), params$a_names,params$tunnel_names,"XX")
            new_col_names <- c(colnames(x), params$a_names,params$tunnel_names,"XX")
            # Expand matrix
            x <- cbind(x,  matrix(rep(0, r_ * add_), nrow=r_))
            x  <- rbind(x, matrix(rep(0, add_ * (r_+add_)), nrow=add_))
            
            rownames(x) <- new_row_names
            colnames(x) <- new_col_names
            
            x["Asympt","accProgressive"] = x["Asympt","Progressive"]
            x["Asympt","trProgressive"] = x["Asympt","Progressive"]
            x["Progressive","trDeadCause"] = x["Progressive","DeadCause"] 
            x
        })
        
        mP_ <- # Embed the transition probability matrix
            lapply(mR,expm)
                
        mP <- lapply(mP_,function(x){
            # Don't allow the transition columns to remain...
            x["trDeadCause","trDeadCause"] = 0
            x["trProgressive","trProgressive"] = 0
            # The receiving bucket was required for embedding, but is no longer needed
            x[-which(rownames(x)=="XX"),-which(colnames(x)=="XX")]    
        }) 
        
        
    })
}

```

# Cohort Simulation Function

```{r}
sim_cohort <- function(params) {
    
    mP <- mPt(1:(params$n_cycles-1),params) # <1>
    
    tr <-  # <2>
        mP %>% transpose() %>% 
        map(~({
            tr_ <- t(c("Asymptomatic_disease" = params$n_cohort, "Progressive_disease" = 0, "DeadCause" = 0, "Dead" = 0,
                       "accProgressive" = 0, "trProgressive" = 0, "trDeadCause" = 0))
            do.call(rbind,lapply(.x, function(tp) {
                tr_ <<- tr_ %*% tp
            }))
        }))
    tr <-  
        tr %>% 
        map(~({
            .x <- rbind(t(c(params$n_cohort,0,0,0,rep(0,length(c(params$a_names,params$t_names))))),.x)
        }))
    
    arr <-  # <3>
        mP %>% transpose() %>% 
        map(~({
            tr_ <- t(c("Asymptomatic_disease" = params$n_cohort, "Progressive_disease" = 0, "DeadCause" = 0, "Dead" = 0, 
                       "accProgressive" = 0, "trProgressive" = 0, "trDeadCause" = 0))
            arr_ <- diag(as.vector(tr_))
            do.call(rbind,lapply(.x, function(tp) {
                tr_ <<- tr_ %*% tp
                arr_ <<- diag(as.vector(tr_)) %*% tp
                arr_
            }))
        }))
    arr <- 
        arr %>% 
        map(~({
            .x <- rbind(diag(c(params$n_cohort,0,0,0,rep(0,length(c(params$a_names,params$t_names))))),.x)
        }))
    
   
    arr <- arr %>% map(~({
        .x %>% data.frame() %>% 
            mutate(cycle = sort(rep(1:params$n_cycles,params$n_states+length(c(params$a_names,params$t_names))))) %>% 
            group_by(cycle) %>% 
            nest()
    }))
    
    return(list(trace = tr, array = arr))
}

markov_result <- # <4> 
    sim_cohort(params)
```

```{r}
lapply(markov_result$trace , function(x) round(x,2))
```

## Define Payoffs

```{r payoffs}
u_payoff <- with(params,{
    array(c("Asympt" = uAsymp, "Progressive" = uProg, "DeadCause" = 0 , "Dead" = 0, "accProgressive" = 0,"trProgressive" = 0, "trDeadCause" = 0,
            "Asympt" = uAsymp, "Progressive" = uProg, "DeadCause" = 0 , "Dead" = 0, "accProgressive" = 0,"trProgressive" = 0,"trDeadCause" = 0),
          dim = c(1, n_states+length(a_names)+length(tunnel_names), n_treatments),
          dimnames = list(from = "cost",
                          to = c(s_names,a_names,tunnel_names),
                          t_names))
    
}) %>% 
   apply(.,3,function(x) t(x), simplify = FALSE)
u_payoff

c_payoff <- with(params,{
    array(c("Asympt" = cAsymp, "Progressive" = cProg, "DeadCause" = 0 , "Dead" = 0, "accProgressive" = 0,"trProgressive" = 0, "trDeadCause" = cDeath,
            "Asympt" = cAsymp+cDrug, "Progressive" = cProg, "DeadCause" = 0 , "Dead" = 0, "accProgressive" = 0,"trProgressive" = 0, "trDeadCause" = cDeath),
          dim = c(1, n_states+length(a_names)+length(tunnel_names), n_treatments),
          dimnames = list(from = "cost",
                          to = c(s_names,a_names,tunnel_names),
                          t_names))
    
    }) %>% 
        apply(.,3,function(x) t(x), simplify = FALSE)
c_payoff
```

```{r}
qaly_unadj <- # .x[-1,] because we don't count the cycle with the full cohort in asymptomatic
    map2(markov_result$trace, u_payoff,  ~ ({
        .x[-1,] %*% .y
    })) %>% 
    set_names(params$t_names)

cost_unadj <- 
    map2(markov_result$trace, c_payoff, ~({
        .x[-1,] %*% .y
    })) %>% 
    set_names(params$t_names)

    
```

# Summarize

## Discounting

```{r discounting}
discounting_cost <- 
    1/(1+params$cDr)^(0:(params$n_cycles-2))
discounting_outcome <- 
    1/(1+params$oDr)^(0:(params$n_cycles-2))
```

## Total Cost and QALY Calculation (With Cycle Adjustment)

```{r}
alt_simp_coef <- function(i) c(17, 59, 43, 49, rep(48, i-8), 49, 43, 59, 17) / 48 # <1>
cycle_adj <- alt_simp_coef(params$n_cycles-1) # <3>
```

1.  Alternative Simpson's method coefficients
2.  Specify the cycle-specific adjustment factors for the model.

```{r}
#| tbl-cap: R Model Results
#| tbl-cap-location: bottom
tot_cost <- 
    map(cost_unadj, ~(sum(.x * discounting_cost * cycle_adj )/params$n_cohort))  %>% 
    set_names(params$t_names)
tot_qaly <- 
    map(qaly_unadj, ~(sum(.x * discounting_outcome * cycle_adj )/params$n_cohort)) %>% 
    set_names(params$t_names)

diff_cost <- 
    tot_cost$with_drug - tot_cost$without_drug
diff_qaly <- 
    tot_qaly$with_drug - tot_qaly$without_drug

cbind.data.frame(cbind(tot_qaly),cbind(tot_cost))  %>% 
    set_names(c("Eff","Cost")) %>% 
    data.frame() %>% 
    rbind.data.frame("difference" = data.frame(Eff = round(diff_qaly,2), Cost = round(diff_cost,0))) %>% 
    mutate(ICER = c("","",paste0(round(diff_cost / diff_qaly,0)))) %>% 
    kable(digits = c(0,0,0)) %>% 
    kable_styling()
```
