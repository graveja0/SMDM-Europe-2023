---
title: "Afternoon Case Study"
editor_options: 
  chunk_output_type: console
---

- Add cycle adjustment (with alt_simp+1) to life expectancy calculations.
- Change the discount rate in the monthly time step too!

# Introduction

The objective of this case study is to work through the process of constructing and then amending an existing Markov model to incorporate new evidence, health states, etc.

```{r setup, warning = FALSE, message = FALSE}
#   without_drug with_drug
# 1       14.367    16.501


# 6093.4
#  without_drug with_drug inc_qalys
# 1         9215     10606    1390.7
# without_drug with_drug inc_costs
# 1     11833489  20307625   8474137

library(tidyverse)
library(demography)
library(MortalityLaws)
library(directlabels)
library(ggsci)
library(hrbrthemes)
library(MASS)
library(mgcv)
library(patchwork)
library(knitr)
library(kableExtra)
library(here)
library(ggsci)
library(expm)
library(glue)
select =dplyr::select
options("scipen" = 100, "digits" = 5)

# Cycle adjustment function
alt_simp_coef <- function(i) c(17, 59, 43, 49, rep(48, i-8), 49, 43, 59, 17) / 48
cycle_adj      <- function(x,h) h*sum(alt_simp_coef(length(x)) * x)

```

# Parameterize

```{r parameterize}
params = list(
    t_names = c("without_drug", "with_drug"),   # Treatment names
    n_treatments =2,                            # Number of treatments
    
    s_names  = c("Asympt", "Progressive", "Dead"),           # State names
    n_states = 3,                               # Number of states
    
    n_cohort =1000,                             # Cohort size
    cycle_length = 1,                         # Cycle length
    initial_age = 55,                           # Cohort starting age
    effect = 0.5,                               # Treatment Effect (drug) 
    
    cAsymp =500,                                # Cost of asympomatic state
    cDeath =1000,                               # cost of death (progressive disease state only)
    cDrug =1000,                                # Cost of drug
    cProg =3000,                                # Cycle cost of progressive disease
    
    uAsymp =0.95,                               # Asymptomatic state utility
    uProg =0.75,                                # Progressive disease state utility
    
    oDr = 0.00,                                  # Discount rate (QALYs)
    cDr = 0.00,                                  # Discount rate (costs)
    
    tpDcm =0.15,                                # Death from progressive disease trans prob
    tpProg =0.01,                               # Transition prob: progressive disease
    tpDn =0.0379                                # Background mortality transition prob
)
params <-  # Annual cycle
    modifyList(params,list(n_cycles = 45/params$cycle_length))
params12 <- # Monthly cycle
    modifyList(params, list(cycle_length = 1/12, 
                            n_cycles = 12 * 45,
                            oDr = ((1 + params$oDr)^(1/12) - 1),
                            cDr = ((1 + params$cDr)^(1/12) - 1)))

```

## Markovian Transition Rate Matrix

```{r mR}
# t = 1:params12$n_cycles
# tt = params12$n_cycles
# attach(params12)
# 
# t = 1:params$n_cycles
# tt = params$n_cycles
# attach(params)

fn_mRt_markov <- function(t, params) {
  with(params, {
    lapply(t, function(tt) {
      current_age <- initial_age + cycle_length * (tt) ; current_age
      year = (tt) * cycle_length; year 
      
      # Get background mortality rate
      tpDn_lookup <-
        c(
          "(34,44]" = 0.0017,
          "(44,54]" = 0.0044,
          "(54,64]" = 0.0138,
          "(64,74]" = 0.0379,
          "(74,84]" = 0.0912,
          "(84,100]" = 0.1958
        )
       age_grp <- cut(current_age, breaks = c(34,44,54,64,74,84,100))
       tpDn <- tpDn_lookup[age_grp]
       
       tpProg_ <- tpProg * ceiling(year)
       
       # Convert supplied probabilities back to rates. 
       rProg = -log(1 - tpProg_)
       rProgDrug = -log(1-(tpProg_*(1-effect)))
       rDcm = -log(1 - tpDcm)
       rDn = -log(1 - tpDn)
       
       # Define off-diagonal elements of rate matrix
       mR_ <- 
            array(data = c(
                           0, 0, 0, 
                           rProg, 0, 0,
                           rDn, rDn + rDcm, 0,
                           
                           0, 0, 0, 
                           rProgDrug, 0, 0, 
                           rDn, rDn + rDcm, 0, 0),
                  
                          dim = c(n_states, n_states, n_treatments),
                          dimnames = list(from = s_names,
                                          to = s_names,
                                          t_names))
       # Balance out rate matrix
       mR <- apply(mR_,3,function(x){
            diag(x) <- -rowSums(x)
            x
        },simplify=FALSE)

    })
  })
}

params$mRMarkov = fn_mRt_markov(1:params$n_cycles, params)
params12$mRMarkov = fn_mRt_markov(1:params12$n_cycles, params12)
```

## Add Non-Markovian Components to Rate Matrix

```{r}

fn_mRt_nonmarkov <- function(R,params) {
    R %>% map(~({
        R_ <- .x
        rDcm = -log(1 - params$tpDcm)
        lapply(R_,function(x) {
            x_ <- cbind(x,"trDeadCause" = rep(0, params$n_states))
            x_ <- rbind(x_,"trDeadCause" = rep(0,params$n_states+1))
            x_["Progressive","trDeadCause"] = rDcm
            x_
        })
    }))
}
params$mR <- fn_mRt_nonmarkov(R =params$mRMarkov,params)
params12$mR <- fn_mRt_nonmarkov(R =params12$mRMarkov,params12)

```

## Transition Probability Matrix

```{r}
fn_mP <- function(R, params) {
    with(params, {
        R %>% map( ~ ({
            lapply(.x, function(x) {
                tmp_ <- expm(x * cycle_length)
                tmp_["trDeadCause", "trDeadCause"] = 0
                tmp_
            })
        }))
    })
}

params$mP <- fn_mP(params$mR, params)
params12$mP <- fn_mP(params12$mR, params12)
```

# Markov Trace

```{r}
sim_cohort <- function(params) {
    with(params,{
        t_names %>% map( ~ ({
            tr_ <- # Create the initial trace 
                t(c(n_cohort, rep(0, n_states)))
            
            res <- # Iterate over the transition matrices (one for each cycle) and update 
                   # the trace by binding on the next cycle's. 
                do.call(rbind, lapply(mP, function(tp) {
                    tr_ <<- tr_ %*% matrix(unlist(tp[[.x]]), nrow = n_states + 1)
                }))
            
            res <- # Add an initial state occupancy as the top row.
                rbind(c(n_cohort, rep(0, n_states)), res)
            
            res <- # The current res object is a list; convert to a numeric matrix.
                matrix(unlist(res), ncol = n_states + 1)
            
            dimnames(res) <- # Define the dimension names of 
                             # the matrix (row = cycle, column = state)
                list(paste0(c(0:n_cycles)), colnames(mP[[1]][[1]]))
            res 
    })) %>% # End result is a list object with one element for each strategy. 
        set_names(t_names) # Name each of the strategies.
    })
     
}
trace <- # Create the trace given the parameters. 
    sim_cohort(params)
trace12 <- # Create the trace given the parameters. 
    sim_cohort(params = params12)
```

# Outcomes

## Survival 

```{r}
survival_payoff <- c("Asympt" = 1, "Progressive" = 1, "Dead" = 0 , "trDeadCause" = 0)
survival = lapply(trace,function(tr) ((tr / params$n_cohort)%*% survival_payoff))
survival12 = lapply(trace12,function(tr) (tr / params12$n_cohort)%*% survival_payoff)

df_surv <- data.frame(survival) %>% 
    mutate(age = params$initial_age + (row_number()-1)*params$cycle_length) %>% 
    tibble() %>% 
    gather(strategy, value,-age) %>% 
    tibble()

df_surv12 = 
    data.frame(survival12) %>% 
    mutate(age = params12$initial_age + (row_number()-1)*params12$cycle_length) %>% 
    tibble() %>% 
    gather(strategy, value,-age) %>% 
    tibble()

df_surv %>% 
    ggplot(aes(x = age, y = value, colour = strategy)) + geom_step() + 
    hrbrthemes::theme_ipsum_pub(base_family = "Arial") + 
    ggsci::scale_colour_aaas() + 
    directlabels::geom_dl(method = list("smart.grid"),aes(label = strategy)) + 
    theme(legend.position = "none") + 
    labs(x = "Cycle", y = "Survival") +
    geom_step(data = df_surv12)
```

## Life Expectancy

```{r}
data.frame(lapply(survival,function(x) sum(x*alt_simp_coef(params$n_cycles+1))))*params$cycle_length
data.frame(lapply(survival12,function(x) sum(x*alt_simp_coef(params12$n_cycles+1))))*params12$cycle_length
```

## Total QALYs and Costs

### Total QALYs

#### Utility Payoffs

-   State occupancy in the Asymtomatic state confers a utility accrual of `r params$uAsymp`.
-   State occupancy in the Progressive disease state confers a utility of `r params$uProg`.

```{r u_payoff}
u_payoff <- with(params,{
    array(c("Asympt" = uAsymp, "Progressive" = uProg,  "Dead" = 0, "trDeadCause" = 0 ,
            "Asympt" = uAsymp, "Progressive" = uProg,  "Dead" = 0, "trDeadCause" = 0),
          dim = c(1, n_states+1, n_treatments),
          dimnames = list(from = "cost",
                          to = c(s_names,"trDeadCause"),
                          t_names))
}) %>% 
    apply(.,3,function(x) x, simplify = FALSE)
u_payoff
```

#### Total QALYs

```{r}
total_qalys_cycle <- 
    map2(trace,u_payoff,~(.x[-1,] %*% t(.y)))
total_qalys_cycle12 <- 
    map2(trace12,u_payoff,~(.x[-1,] %*% t(.y)))

cycle_adjustments_qalys <- 
    alt_simp_coef(params$n_cycles) * 1/(1+params$oDr)^(0:(params$n_cycles-1))
cycle_adjustments_qalys12 <- 
    alt_simp_coef(params12$n_cycles) * 1/(1+params12$oDr)^(0:(params12$n_cycles-1))

tot_qalys <- 
    lapply(total_qalys_cycle,function(x) sum(x * cycle_adjustments_qalys ))
tot_qalys <- 
    cbind.data.frame(tot_qalys) %>% mutate(inc_qalys = with_drug - without_drug)
tot_qalys

tot_qalys12 <- 
    lapply(total_qalys_cycle12,function(x) sum(x *cycle_adjustments_qalys12 * params12$cycle_length ))
tot_qalys12 <- 
    cbind.data.frame(tot_qalys12) %>% mutate(inc_qalys = with_drug - without_drug)
tot_qalys12 
```


#### Cost Payoffs

-   For the **No Drug** strategy, tate occupancy in the Asymptomatic state confers a cost of `r params$cAsymp` per cycle.
-   For the **With Drug** strategy, tate occupancy in the Asymptomatic state confers a cost of `r params$cAsymp + params$cDrug` per cycle.
-   State occupancy in the Progressive disease state confers a cost of `r params$cProg` per cycle.

```{r c_payoff}
c_payoff <- with(params,{
    cAsymp_ = cAsymp * cycle_length
    cProg_ = cProg * cycle_length
    cDrug_ = cDrug * cycle_length
    array(c("Asympt" = cAsymp_ , "Progressive" = cProg_,  "Dead" = 0, "trDeadCause" =  cDeath,
            "Asympt" = cAsymp_+cDrug_, "Progressive" = cProg_,  "Dead" = 0 , "trDeadCause" = cDeath),
          dim = c(1, n_states+1, n_treatments),
          dimnames = list(from = "cost",
                          to = c(s_names,"trDeadCause"),
                          t_names))
}) %>% 
    apply(.,3,function(x) x, simplify = FALSE)
c_payoff

c_payoff12 <- with(params12,{
    cAsymp_ = cAsymp * cycle_length
    cProg_ = cProg * cycle_length
    cDrug_ = cDrug * cycle_length
    array(c("Asympt" = cAsymp_ , "Progressive" = cProg_,  "Dead" = 0, "trDeadCause" =  cDeath,
            "Asympt" = cAsymp_+cDrug_, "Progressive" = cProg_,  "Dead" = 0 , "trDeadCause" = cDeath),
          dim = c(1, n_states+1, n_treatments),
          dimnames = list(from = "cost",
                          to = c(s_names,"trDeadCause"),
                          t_names))
}) %>% 
    apply(.,3,function(x) x, simplify = FALSE)
c_payoff12
```



```{r}
total_costs_cycle <- map2(trace,c_payoff,~(.x[-1,] %*% t(.y)))
cycle_adjustments_costs <- alt_simp_coef(params$n_cycles) * 1/(1+params$cDr)^(0:(params$n_cycles-1))

tot_costs <- lapply(total_costs_cycle,function(x) sum(x *cycle_adjustments_costs ))
tot_costs <- cbind.data.frame(tot_costs) %>% mutate(inc_costs = with_drug - without_drug)
tot_costs

total_costs_cycle12 <- map2(trace12,c_payoff12,~(.x[-1,] %*% t(.y)))
cycle_adjustments_costs12 <- alt_simp_coef(params12$n_cycles) * 1/(1+params12$cDr)^(0:(params12$n_cycles-1))

tot_costs12 <- lapply(total_costs_cycle12,function(x) sum(x *cycle_adjustments_costs12))
tot_costs12 <- cbind.data.frame(tot_costs12) %>% mutate(inc_costs = with_drug - without_drug)
tot_costs12
```


## ICER

```{r}
tot_costs$inc_costs / tot_qalys$inc_qalys
tot_costs12$inc_costs / tot_qalys12$inc_qalys
```

