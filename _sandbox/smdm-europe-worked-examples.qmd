---
title: "SMDM Europe Worked Examples"
editor_options: 
  chunk_output_type: console
execute:
  code-fold: true
  message: false
  warning: false  
  cache: true
reference-location: margin
self-contained: true
editor: 
  markdown: 
    wrap: 72
---

# Outline

## 1. Alive-Dead
  - Estimate a mortality model to parameterize background mortality.
  - Verify that a discrete time Markov model can replicate life-expectancy at age X.
  
## 2. Healthy-Sick-Dead

  - Split "Alive" health state into healthy vs. sick
  - Don't add in cause-specific mortality yet.
  - Verify that a discrete time Markov model can replicate life-expectancy at age X.
  
## 3. Healthy-Sick-DeadSick-Dead

  - Add a cause-specific death category.
  - Show that if we assume a static hazard ratio for death (applied to the secular death rate) we will dramatically understate overall life expectancy.
  - Construct a cause-deleted life table, and use the cause deleted secular deaths instead.
  - Model using cause-specific death rate from the cause-deleted life table data. 
    - Show how you could also use a modeled death estimate that reduces the number of parameters, rather than an age-specific estimate from the life table. 

## 4. Competing Risks and Jumpover States 
  

```{r setup}
#| cache: false
#| warning: false
#| message: false
#| echo: false
#| code-fold: true
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message = FALSE)

library(tidyverse)
library(knitr)
library(kableExtra)
library(survival)
library(flexsurv)
library(haven)
library(dampack)
library(Matrix)
library(here)
library(glue)
library(demography)
library(glue)
library(MortalityLaws)
library(demography)
library(MASS)

select <- dplyr::select
edit.na <- function(x, value) { x[is.na(x)] <- value; x}

theme_set(hrbrthemes::theme_ipsum())

ProbToRate = function(prob, t){
  -log(1-prob)/t
}

RateToProb = function(rate, t){
  1 - exp(-rate*t)
}

```

# 1. Setup the Underlying Model 

## Parameters

```{r}
#| warning: false
#| message: false
#| echo: true
#| code-fold: false
params <- list(
  n_age_init = 55,
  n_age_max = 65,
  d_c = 0.03,
  d_e = 0.03, 
  n_sim = 1000,
  r_HS = 0.1,
  hr_S = 1.9, # hazard ratio on rate
  # overall death
  # p_HD is the time-varying background mortality
  # p_SD is the time-varying background mortality * 1.9(Hazard Ratio)
  hr_HS_trt = 0.5,
  u_H = 1,
  u_S = 0.773,
  u_D = 0,
  c_H = 8494, # Non-CVD health care cost
  c_trt = 840,
  c_S = 3917 + 8494, # Cost of annual follow-up post ASCVD
  c_nonfatal_firstYr = 49348,
  c_fatal_firstYr = 16760,
  c_D = 0,
  cycle_length = 1,
  n_cycles = 10
)

v_names_states = c("Healthy", "Sick", "Death")
n_states = length(v_names_states)
v_names_str = c("quo","trt")
n_strategies = length(v_names_str)
```

## Underlying Life-Table Data

```{r, eval = FALSE}
#| warning: false
#| message: false
#| echo: false
#| code-fold: true
hmd.usa <- demography::hmd.mx("USA",username = "TK", password = "TK", "USA")
write_rds(hmd.usa,file=here("_sandbox/mortality/usa-life-table.rds"))
```

### Mortality Model

```{r}
#| warning: false
#| message: false
#| echo: true
#| code-fold: false
#############################################
# Define Parameters for Life Table Modeling
#############################################
mort_year <- 2019
N = 100000
max_age <- 99
min_age <- 0
n_cycles = 100

###############################
# Underlying Life-Table Data
###############################

lt <-  # Read in the U.S. life table data from the human mortality database.
  read_rds(here("_sandbox/mortality/usa-life-table.rds")) %>% 
  lifetable(.,series = "total", years = mort_year) %>% 
  as_tibble() %>% 
  mutate_at(vars(lx,dx), function(x) x*100000) %>% 
  mutate(country = "USA") %>% 
  mutate(age = x)

ages     <- lt$x[lt$x<=max_age & lt$x>=min_age]
deaths   <- lt$dx[lt$x<=max_age & lt$x>=min_age]
exposure <- lt$lx[lt$x<=max_age & lt$x>=min_age]

############################
# Fit the mortality model
############################
#availableLaws()

gom_fit <- MortalityLaw(
                x  = ages,
                Dx  = deaths,   # vector with death counts
                Ex  = exposure, # vector containing exposures
                law = "gompertz",
                opt.method = "LF2")
plot(gom_fit)

hp_fit <- MortalityLaw(
                x  = ages,
                Dx  = deaths,   # vector with death counts
                Ex  = exposure, # vector containing exposures
                law = "HP2",
                opt.method = "LF2")

plot(hp_fit)

lt_fit <-
    tibble(age = ages) %>%
    mutate(
        mx_gom = gompertz(ages, gom_fit$coefficients)$hx,
        mx_hp = HP2(ages, hp_fit$coefficients)$hx
    )

```

```{r}
#| warning: false
#| message: false
#| echo: false
#| code-fold: true


params <- modifyList(params,
                     list(
                         gompertz = unname(coef(gom_fit)),
                         heligman_bollard = unname(coef(hp_fit))
                     ))


```


## Mortality Markov

Can we replicate the life table data?

```{r}
#| warning: false
#| message: false
#| echo: true
#| code-fold: true
#| eval: false

starting_age = 40

tr_ <- bind_rows(c("alive" = 1, "dead" = 0)) %>% mutate(t = 0) %>% select(t,alive,dead)

for (.x in 1:n_cycles) {
    
    r_death <- HP2(.x + starting_age - 1, params$heligman_bollard)$hx
    #r_death <- gompertz(.x + starting_age - 1,params$gompertz)$hx
    
    
    m_Q <-
        matrix(
            c(-(r_death), r_death, 0, 0),
            byrow = TRUE,
            ncol = 2,
            dimnames = list(c("alive", "dead"), c("alive", "dead"))
        )

    m_P <-
        expm(m_Q)
    
    tmp_ <- c(tr_[.x, "alive"], tr_[.x, "dead"]) %>% unlist()
    
    tr_ <-
        bind_rows(
            tr_,
            (tmp_ %*% m_P)  %>% as.matrix() %>% data.frame() %>% mutate(t = .x) %>% dplyr::select(t, alive, dead)
        )
    
}

foo <- tr_

# Cycle adjustment
cycle <- 
    c(rep(c(4/3,2/3),n_cycles/2),1/3)
cycle[1] <- 1/3

# Life-Expectancy via the discrete time Markov
ly <- c(1,0)
living <- as.matrix(tr_[,c("alive","dead")]) %*% ly

life_exp <- 
    t(cycle) %*% tr_$alive ; life_exp


# Life-Expectancy via the life table
lt %>% filter(age==starting_age) %>% pull(ex)


```

```{r}
#| warning: false
#| message: false
#| echo: false
#| code-fold: true

model_ages <- c(0,80) 

healthy_dead <- function(starting_age, mort_model = "hp") {
    tr_ <-
        bind_rows(c("alive" = 1, "dead" = 0)) %>% mutate(t = 0) %>% select(t, alive, dead)
    
    for (.x in 1:n_cycles) {
        
        if (mort_model=="hp") r_death <- HP2(.x + starting_age - 1, params$heligman_bollard)$hx
        if (mort_model=="gom") r_death <- gompertz(.x + starting_age - 1,params$gompertz)$hx
        
        m_Q <-
            matrix(
                c(-(r_death), r_death, 0, 0),
                byrow = TRUE,
                ncol = 2,
                dimnames = list(c("alive", "dead"), c("alive", "dead"))
            )
        
        m_P <-
            expm(m_Q)
        
        tmp_ <- c(tr_[.x, "alive"], tr_[.x, "dead"]) %>% unlist()
        
        tr_ <-
            bind_rows(
                tr_,
                (tmp_ %*% m_P)  %>% as.matrix() %>% data.frame() %>% mutate(t = .x) %>% dplyr::select(t, alive, dead)
            )
        
    }
    
    # Cycle adjustment
    cycle <-
        c(rep(c(4 / 3, 2 / 3), n_cycles / 2), 1 / 3)
    cycle[1] <- 1 / 3
    
    # Life-Expectancy via the discrete time Markov
    life_exp <-
        t(cycle) %*% tr_$alive
    
    # Life-Expectancy via the life table
    life_exp_lt <- lt %>% filter(age == starting_age) %>% pull(ex)
    
    out <- data.frame(model = life_exp, lt = life_exp_lt)
    return(out)
}

res_compare <- 
    seq(0,80,2) %>% map_df(~healthy_dead(.x)) %>% 
    mutate(age = seq(0,80,2)) 
res_compare_gom <- 
    seq(0,80,2) %>% map_df(~healthy_dead(.x,mort_model="gom")) %>% 
    mutate(age = seq(0,80,2)) 
    

```

```{r}
#| fig-cap: Life Expectancy by Age  Heligman Bollard vs. Life Table Data
#| warning: false
#| message: false
#| echo: false
#| code-fold: true
#| fig-width: 10
#| fig-height: 10
df_p <- 
    res_compare %>% 
    mutate(x_gom = res_compare_gom$model) %>% 
    gather(model,value,-lt,-age) %>% 
    mutate(model = factor(model, levels = c("model","x_gom"), labels = c("Heligman-Bollard","Gompertz")))

df_p %>% 
    ggplot(aes(x = value, y = lt, colour = model)) + geom_text(data = df_p %>% filter(model=="Heligman-Bollard"), aes(label = age),hjust=1.5,colour = "black") +  geom_point() +
    geom_abline(aes(slope=1,intercept = 0)) +
    labs(x = "Heligman-Bollard Mortality Model",
         y = "Life Table") +
    ggsci::scale_colour_aaas(name="") +
    theme(legend.position = "top")
```

# Healthy-Sick-Dead

We'll now start with a healthy-sick-dead model that has competing risks. 

## Can we recover the life-expectancy? 

```{r}
starting_age = .x = 40

tr_ <- bind_rows(c("healthy" = 1, "sick" = 0, "dead" = 0)) %>% mutate(t = 0) %>% select(t,healthy,sick,dead)

for (.x in 1:n_cycles) {
    
   r_death <- HP2(.x + starting_age - 1, params$heligman_bollard)$hx
    
      # Correct Version
    m_Q <-
        matrix(
            c(-(r_death + params$r_HS), params$r_HS, r_death,
                0, -(r_death), r_death,
              0,0,0),
            byrow = TRUE,
            ncol = 3,
            dimnames = list(c("healthy", "sick","dead"), c("healthy", "sick","dead"))
        )
    
    m_P <-
        expm(m_Q)
    
    tmp_ <- c(tr_[.x, "healthy"], tr_[.x, "sick"], tr_[.x, "dead"]) %>% unlist()
    
    tr_ <-
        bind_rows(
            tr_,
            (tmp_ %*% m_P)  %>% as.matrix() %>% data.frame() %>% mutate(t = .x) %>% select(t,healthy,sick,dead)
        )
    
}

# Cycle adjustment
cycle <- 
    c(rep(c(4/3,2/3),n_cycles/2),1/3)
cycle[1] <- 1/3

# Life-Expectancy via the discrete time Markov
ly <- matrix(c(1,1,0),byrow=TRUE,ncol=1)
living <- as.matrix(tr_[,c("healthy","sick","dead")]) %*% ly

life_exp <- 
    t(cycle) %*% living ; life_exp

# Life-Expectancy via the life table
lt %>% filter(age==starting_age) %>% pull(ex)

```

What happens if we just put in a cause-specific hazard rate for death? 

```{r}
starting_age = .x = 40

tr_ <- bind_rows(c("healthy" = 1, "sick" = 0, "dead" = 0)) %>% mutate(t = 0) %>% select(t,healthy,sick,dead)

for (.x in 1:n_cycles) {
    
   r_death <- HP2(.x + starting_age - 1, params$heligman_bollard)$hx
    
      # Correct Version
    m_Q <-
        matrix(
            c(-(r_death + params$r_HS), params$r_HS, r_death,
                0, -(r_death * params$hr_S), r_death* params$hr_S,
              0,0,0),
            byrow = TRUE,
            ncol = 3,
            dimnames = list(c("healthy", "sick","dead"), c("healthy", "sick","dead"))
        )
    
    m_P <-
        expm(m_Q)
    
    tmp_ <- c(tr_[.x, "healthy"], tr_[.x, "sick"], tr_[.x, "dead"]) %>% unlist()
    
    tr_ <-
        bind_rows(
            tr_,
            (tmp_ %*% m_P)  %>% as.matrix() %>% data.frame() %>% mutate(t = .x) %>% select(t,healthy,sick,dead)
        )
    
}

# Cycle adjustment
cycle <- 
    c(rep(c(4/3,2/3),n_cycles/2),1/3)
cycle[1] <- 1/3

# Life-Expectancy via the discrete time Markov
ly <- matrix(c(1,1,0),byrow=TRUE,ncol=1)
living <- as.matrix(tr_[,c("healthy","sick","dead")]) %*% ly

life_exp <- 
    t(cycle) %*% living ; life_exp

# Life-Expectancy via the life table
lt %>% filter(age==starting_age) %>% pull(ex)

```

We no longer approximate the 'natural history' life-expectancy! Uh oh. 

Let's get an age-specific cause of death data from the [Global Burden of Disease](https://vizhub.healthdata.org/gbd-results/) project. 

These data summarize, by age group, the percentage of overall deaths that are attributable to cardiovascular disease. 

```{r}

ihme_cvd <- 
tibble::tribble(
        ~age_name,        ~val,
               1L, 0.038771524,
               5L, 0.038546046,
              10L, 0.044403585,
              15L, 0.033781126,
              20L, 0.035856165,
              25L, 0.053077797,
              30L, 0.086001439,
              35L, 0.130326551,
              40L, 0.184310334,
              45L,  0.21839762,
              50L, 0.243705394,
              55L, 0.256334637,
              60L,  0.26828001,
              65L, 0.272698709,
              70L,  0.28529754,
              75L, 0.310642009,
               0L, 0.016750489,
              80L, 0.353518012,
              85L, 0.399856716,
              90L, 0.447817792,
              95L, 0.495305502
        ) %>% 
    mutate(age_ihme = cut(age_name,unique(c(0,1,seq(0,95,5),105)),right=FALSE))  %>% 
    select(age_ihme,  pct_cvd = val) 
```

We now need to take our life table data and bin it similarly to the IHME data. 

```{r}
# Source: https://grodri.github.io/demography/neoplasms

# The time to death wtihin intervals is drawn from the "a" column here. 
# We really only use it for the 
# url = "https://grodri.github.io/datasets/preston41.dat"
# b41 <- read.table(url, header=FALSE)
# names(b41) <- c("age","D","Di","lx","a")

edit.na <- function(x, value) { x[is.na(x)] <- value; x}
    
edit.na <- function(x, value) { x[is.na(x)] <- value; x}

lt_ <-
    lt %>% 
    mutate(age_ihme = cut(age,unique(c(0,1,seq(0,95,5),105)),right=FALSE)) %>% 
    left_join(ihme_cvd,"age_ihme") %>%
    mutate(dx_i = round(dx * pct_cvd)) %>% 
    select(age_ihme,
           age,
           D = dx,  # Deaths
           Di = dx_i, # Cause-specific deaths
           lx = lx) %>% # Living
    mutate(a = ifelse(age_ihme == "[0,1)", 0.152, 0.5)) %>% 

    # The conditional probability of dying of a given cause given survival to 
    # the age group is easy to obtain, we just multiply the overall probability 
    # by the ratio of deaths of a given cause to all deaths.
        
    mutate(q = edit.na(1 - lead(lx)/lx, 1),
           qi = q * Di/D) %>% 
    
    # The unconditional counts of deaths of any cause and of a given cause 
    # are calculated multiplying by the number surviving to the start of each 
    # age group, which is lx. Recall that to die of cause i in the interval 
    # [x, x+n) one must survive all causes up to age x.

    mutate(d = lx * q, 
           di = lx * qi) %>% 
    
    # In preparation for the next part, note that if we had nmx and we were willing 
    # to assume that the hazard is constant in each age group we would have had a 
    # slightly different estimate of the survival function. Let us “back out” 
    # the rates from the probabilities:
        
    mutate(n = c(diff(age),NA), 
           m =  edit.na( q/(n - q * (n - a)), 1/tail(a,1))) %>%  # m[last] = 1/a[last]
    
    # With these rates we compute the cumulative hazard and survival as
    
    mutate(H = cumsum(n * m), 
           S = edit.na(exp(-lag(H)), 1)) %>%  # S[1] = 1
        
    # We compute cause-specific rates by dividing deaths of a given cause into person-years 
    # of exposure, which is equivalent to multiplying the overall rate by the ratio of 
    # deaths of a given cause to the total. Here we want deaths for causes other than 
    # neoplasms. I will use the subscript d for deleted:
        
    mutate(Rd = (D - Di)/D,
           md = m * Rd) %>% 
    
    # We compute the conditional probability of surviving an age group after 
    # deleting a cause as the overall probability raised to Rd, and then calculate 
    # the survival function as a cumulative product
    
    mutate(pd = (1 - q)^Rd,
           ld = 100000 * cumprod(c(1, pd[-length(pd)]))) %>% 
    
    # Then we construct a survival function in the usual way, but treating this 
    # hazard as if it was the only one operating:
        
    mutate(Hd = cumsum(n * md), 
           Sd = edit.na(exp(-lag(Hd)), 1)) %>% # Sd[1] = 1 
    mutate(Pd =  edit.na((Sd - lead(Sd))/md, tail(Sd/md, 1))) %>% 
  
  # Now do it for cause-specific death. 
  
  mutate(Ri = Di / D, 
         pi = (1 - qi)^Ri,
         li = 100000 * cumprod(c(1, pi[-length(pi)]))) %>% 
  mutate(mi = m - md)

bx <- mutate(lt_, agem = age + n/2, mi = m - md)[-nrow(lt_), ]

ggplot(bx, aes(agem, m)) + geom_line() + scale_y_log10() +
  geom_line(aes(agem, md), col="red",linetype="dashed") + 
  geom_line(aes(agem, mi),col="blue")  + 
  labs(x = "Age", y = "Mortality Rate")


```


```{r}
ages_     <- lt_$age[lt_$age<=max_age & lt_$age>=min_age]
deaths_   <- lt_$d[lt_$age<=max_age & lt_$age>=min_age] - lt_$di[lt_$age<=max_age & lt_$age>=min_age]
exposure_  <- lt_$lx[lt_$age<=max_age & lt_$age>=min_age]

hp_fit_ <- MortalityLaw(
                x  = ages_,
                Dx  = deaths_,   # vector with death counts
                Ex  = exposure_, # vector containing exposures
                law = "HP2",
                opt.method = "LF2")



```

Now let's construct a model that adds in cause-specific death. 

```{r}
params <- modifyList(params, list(cause_deleted = coef(hp_fit_)))
starting_age = .x = 40

tr_ <- bind_rows(c("healthy" = 1, "sick" = 0, "cvddeath" = 0, "dead" = 0)) %>% mutate(t = 0) %>% select(t,healthy,sick,cvddeath,dead)

for (.x in 1:n_cycles) {
  
   current_age <- min(.x + starting_age - 1,max(lt_$age))
  
   r_death <- HP2(.x + starting_age - 1, params$cause_deleted)$hx
   r_cause <- lt_ %>% filter(age==current_age) %>% pull(mi)
    
      # Correct Version
    m_Q <-
        matrix(
            c(-(r_death + params$r_HS), params$r_HS, 0, r_death,
                0, -(r_cause+r_death), r_cause,r_death,
              0,0,0,0,
              0,0,0,0),
            byrow = TRUE,
            ncol = 4,
            dimnames = list( c("healthy", "sick","cvddeath","dead"), c("healthy", "sick","cvddeath","dead"))
        )
    
    m_P <-
        expm(m_Q)
    
    tmp_ <- c(tr_[.x, "healthy"], tr_[.x, "sick"], tr_[.x, "cvddeath"],tr_[.x, "dead"]) %>% unlist()
    
    tr_ <-
        bind_rows(
            tr_,
            (tmp_ %*% m_P)  %>% as.matrix() %>% data.frame() %>% mutate(t = .x) %>% select(t,healthy,sick,cvddeath,dead)
        )
    
}

# Cycle adjustment
cycle <- 
    c(rep(c(4/3,2/3),n_cycles/2),1/3)
cycle[1] <- 1/3

# Life-Expectancy via the discrete time Markov
ly <- matrix(c(1,1,0,0),byrow=TRUE,ncol=1)
living <- as.matrix(tr_[,c("healthy","sick","cvddeath","dead")]) %*% ly

life_exp <- 
    t(cycle) %*% living ; life_exp

# Life-Expectancy via the life table
lt %>% filter(age==starting_age) %>% pull(ex)

```

Good news: we essentially replicate overall life expectancy!

- Note that we used the cause-deleted life table's cause-specific mortality rate (`mi`) here. Another alternative would be to use a similar mortality model as above -- but in practice, for CVD deaths this does not yield good predictions for old ages (see plot )

```{r}
ages_     <- lt_$age[lt_$age<=max_age & lt_$age>=min_age]
deaths_i   <- lt_$di[lt_$age<=max_age & lt_$age>=min_age]
exposure_i  <- lt_$li[lt_$age<=max_age & lt_$age>=min_age]

hp_fit_i <- MortalityLaw(
                x  = ages_,
                Dx  = deaths_i,   # vector with death counts
                Ex  = exposure_i, # vector containing exposures
                law = "HP2",
                opt.method = "LF2")

params <- modifyList(params, list(cause_deleted = coef(hp_fit_),
                                  cause_specific = coef(hp_fit_i)))

plot(hp_fit_i)
```

# Competing Risks

Let's start off with the correctly embedded transition probability matrix for a 75 year old

```{r}
current_age <- 75
  
r_death <- HP2(current_age, params$cause_deleted)$hx
r_cause <- lt_ %>% filter(age==current_age) %>% pull(mi)
    

m_Q <-
    matrix(
        c(-(r_death + params$r_HS), params$r_HS, 0, r_death,
            0, -(r_cause+r_death), r_cause,r_death,
          0,0,0,0,
          0,0,0,0),
        byrow = TRUE,
        ncol = 4,
        dimnames = list( c("healthy", "sick","cvddeath","dead"), c("healthy", "sick","cvddeath","dead"))
    )

m_P <-
    expm(m_Q)

m_P
```

Notice that there is a positive probability of transitioning from healthy to CVD death in a cycle.
