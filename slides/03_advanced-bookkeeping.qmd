---
title: "Advanced Bookkeeping"
subtitle: "Non-Markovian Accumulators, Transition States, and Backwards Conversion"
format:
  revealjs:
    transition: fade
    background-transition: fade
    incremental: true 
    footer: |
      [Back to Website](../index.html)
editor_options: 
  chunk_output_type: console
self-contained: true
bibliography: references.bib
---

```{r setup}
source("./manifest.r")
```

## Learning Objectives

-   Establish the transition rate matrix as the central "hub" of the modeling process.
-   Include transition states and accumulators to accurately track and count events, costs, and QALYs.
-   Backwards convert an existing Markov model to facilitate new health states, new strategies, or new settings.

# Review of Key Concepts

## Transition Rate Matrix {background-image="images/paste-7BE7C6AF.png" data-background-size="contain" background-opacity="0.2"}

::: incremental
-   The central "hub" of a Markov model.
-   Straightforward to convert rate matrix into a transition probability matrix.
-   Facilitates modeling using alternative techniques:
    -   Continuous time Markov
    -   Discrete event simulation
:::

## Transition Rate Matrix {background-image="images/paste-7BE7C6AF.png" data-background-size="contain" background-opacity="0.2"}

-   The "workshop" where you can include additional health states, new evidence, change cycle lengths, etc.
-   Ensures that results obtained via discrete time Markov model will match those under an identical model but different method (e.g., DES).

## What they didn't teach you {background-image="images/paste-7BE7C6AF.png" data-background-size="contain" background-opacity="0.2"}

-   The transition rate matrix is also **essential** for accurate and transparent accounting of costs and QALYs.

## What we'll teach you {background-image="images/paste-7BE7C6AF.png" data-background-size="contain" background-opacity="0.2"}

-   We'll demonstrate how to augment the matrix with non-Markovian elements using the basic CVD model from the last session.
-   We'll show you how to backwards convert an existing transition probability matrix into a continuous generator (rate) matrix.
-   We'll then replicate and extend a recent didactic model (Green et al. 2023) in an applied case study using these methods.

# CVD Model

## CVD Model

::: nonincremental
-   Let's quickly build up the basic CVD model again.
:::

## CVD Model

```{dot}
//| fig-align: center
//| fig-width: 10
//| 
digraph G {
    layout = neato;
    Healthy [pos="0,0!"];
    CVD [pos="1,1!"]; 
    Dead [pos="1,-1!"]
    Healthy -> Healthy ;
    CVD -> CVD;
    Healthy -> CVD [label="r_H_CVD = 0.15"]; 
    CVD -> Dead [label=" hr_CVD * r_HD\nhr_CVD=10" ];
    Healthy -> Dead [label="r_HD=0.01"];
    Dead -> Dead;
  }
```

## Parameterize

```{r}
#| echo: true

params = 
  list(
    t_names = c("natural_history"),           # Strategy names. 
    n_treatments = 1,                         # Number of treatments
    s_names  = c("Healthy", "CVD", "Dead"),   # State names
    n_states = 3,                             # Number of states
    n_cohort = 1,                             # Cohort size
    n_cycles = 100,                           # Number of cycles in model.  
    cycle = 1,                                # Cycle length
    initial_age = 55,                         # Cohort starting age
    r_H_CVD = 0.15,                           # Rate of healthy -> CVD
    hr_CVD = 10,                              # Hazard Ratio: CVD Death
    r_H_D = 0.01                              # Rate of healthy -> dead
  )


```

## Transition Rate Matrix

```{r}
#| echo: true
params$mR <- 
  with(params,{
    r_CVD_D <- hr_CVD * r_H_D
    R_ <- 
      array(data = c(0, 0, 0,  
                 r_H_CVD,0, 0,
                 r_H_D,r_H_D + r_CVD_D,0,
                 r_H_D, 0,0),
          dim = c(n_states, n_states, n_treatments),
                  dimnames = list(from = s_names,
                                  to = s_names,
                                  t_names))
    R <- apply(R_,3, simplify=FALSE,function(x) {
      diag(x) = -rowSums(x)
      x * cycle
    })
  R    
  })
```

## Transition Rate Matrix

```{r}
#| echo: true
params$mR
```

## Transition Probability Matrix

```{r, echo = TRUE}
expm(params$mR[["natural_history"]])
```

## Advanced Bookkeeping

1.  Given compound transitions, how can we track the total number of people who develop CVD?
2.  What if there is a cost associated with a single transition type (e.g., CVD {{< fa arrow-right >}} CVD death)?
3.  What if we want to include a tunnel state to capture transient utility changes after contracting CVD or experiencing an acute event?

## Advanced Bookkeeping

Augmenting the transition matrix with non-markovian elements can address each question:

1.  **Accumulator states** to count total number of people who enter a health state.
2.  **Transition states** to count the number of people who transition into a state in a given cycle.
3.  **Tunnel states** to capture transient events (e.g., 2 cycle utility decrement, etc.)

## Markovian Transition Matrices

-   Traditional Markov modeling approaches restrict to a transition probability matrix.
-   Row sums all equal 1.0.

## Markovian Transition Matrices

::: nonincremental
-   Traditional Markov modeling approaches restrict to a transition probability matrix.
-   Row sums all equal 1.0.
:::

```{r, echo = FALSE}
Pexp0 <-
  expm(params$mR[["natural_history"]]) %>%
  round(., 3) %>%
  data.frame() %>% 
  rownames_to_column()  


Pexp0 %>% 
  kable(col.names = c("",params$s_names)) %>% 
  kable_styling(full_width=FALSE) %>% 
  kable_paper() %>% 
  column_spec(2:4, color ="black", background = "#a2cc99")

```

## Non-Markovian Elements

-   Augmenting the transition matrix with non-markovian rows and columns can facilitate accurate counting and bookkeeping.
-   Depending on the objective, can include non-markovian **accumulators** and/or **transition states**.

## Non-Markovian Elements

-   **Accumulator**: tracks the total number of individuals who have entered a given state up until a given cycle (even if they moved out of the state later).

## Non-Markovian Elements

-   **Transition state**: tracks the total number of individuals who enter a given state in a given cycle.
    -   Can construct as a **tunnel state** if you move them through to the next state (or exit for some other reason like background mortality).
    -   But you don't have to do this. Depending on objective, you could just count the total number who enter the state to count up transitory costs, etc.

## Where we're headed

```{r, echo = FALSE}
Pexp <-
  expm(params$mR[["natural_history"]]) %>%
  round(., 3) %>%
  data.frame() %>% 
  rownames_to_column()  %>% 
  cbind.data.frame(., trCVD = c(".", ".", ".")) %>% 
  cbind.data.frame(., accCVD = c(".", ".", ".")) %>% 
  rbind(., c("trCVD",rep(".", params$n_states + 2))) %>% 
  rbind(., c("accCVD",rep(".", params$n_states + 2)))


Pexp %>% 
  kable(col.names = c("",params$s_names,"trCVD","accCVD")) %>% 
  kable_styling(full_width=FALSE) %>% 
  kable_paper() %>% 
  column_spec(2:4, color ="black", background = ifelse(Pexp$rowname %in% params$s_names,"#a2cc99",
                                                       ifelse(Pexp$rowname=="trCVD","#e8b0d1","#a29af5"))) %>% 
  column_spec(5, color = "black", background = ifelse(Pexp$rowname %in% c("trCVD",params$s_names),"#e8b0d1","#a29af5")) %>% 
  column_spec(6, color = "black", background = ifelse(Pexp$rowname %in% c("accCVD","trCVD",params$s_names),"#a29af5","#e8b0d1")) 

```

# Augmenting the Transition Matrix

## Augmenting the Transition Matrix

-   As noted earlier, all roads begin from the transition rate matrix.
-   The way in which we construct the Markovian components is the same.
    -   Place rates as appropriate.
    -   Diagonal of Markovian elements is the negative sum of the other row elements.

## Augmenting the Transition Matrix

::: nonincremental
-   Rate matrix for basic CVD model
:::

```{r, echo = FALSE}
Rexp0 <-
  params$mR[["natural_history"]] %>%
  round(., 3) %>%
  data.frame() %>% 
  rownames_to_column()  

Rexp0 %>% 
  kable(col.names = c("",params$s_names)) %>% 
  kable_styling(full_width=FALSE) %>% 
  kable_paper() %>% 
  column_spec(2:4, color ="black", background = "#a2cc99")

```

## Total CVD Cases

-   Suppose we wanted to track the total number of people who develop CVD over the simulated time horizon.
-   We can't do this accurately using CVD state occupancy in the Markov trace due to compound transitions.

## Total CVD Cases

-   We need some way to track everyone who moves into the CVD state.
-   We can do this by adding a **non-markovian accumulator** to the rate matrix.

# 1. Accumulators

## Non-Markovian Accumulators

We'll start with the original transition rate matrix:

```{r, echo = TRUE}
R_ <- params$mR[["natural_history"]]
R_
```

## Non-Markovian Accumulators

::: nonincremental
-   Next, we will add both a column *and* a row for the accumulator that tracks movement into the CVD health state.
:::

-   For now, just include zeros.

## Non-Markovian Accumulators

::: nonincremental
-   Next, we will add both a column *and* a row for the accumulator that tracks movement into the CVD health state.

-   For now, just include zeros.
:::

```{r, echo = TRUE}
R <- 
  cbind(R_,"accCVD" = c(0,0,0)) %>% 
  rbind(.,"accCVD" = c(0,0,0,0))  
R
```

## Non-Markovian Accumulators

::: nonincremental
-   Next fill in the appropriate transition rate.
:::

```{r, echo = TRUE}
#| code-line-numbers: "1"
R["Healthy","accCVD"] = params$r_H_CVD
R
```

## Non-Markovian Accumulators

::: nonincremental
-   Embed using matrix exponentiation to obtain the transition probability matrix.
:::

-   The transition matrix now includes a Markovian submatrix (green) and a non-markovian accumulator component (purple).

```{r, echo = TRUE, eval = FALSE}
expm(R)  
```

```{r}
Pexp <-
  expm(params$mR[["natural_history"]]) %>%
  round(., 3) %>%
  data.frame() %>% 
  rownames_to_column()  %>% 
  cbind.data.frame(., accCVD = round(unname(expm(R))[1:3,4],3)) %>% 
  rbind(., c("accCVD",round(unname(expm(R))[4,],3)))


Pexp %>% 
  kable(col.names = c("",params$s_names,"accCVD")) %>% 
  kable_styling(full_width=F) %>% 
  kable_paper() %>% 
  kable_styling(font_size = 18) %>% 
  column_spec(2:4, color ="black", background = ifelse(Pexp$rowname %in% params$s_names,"#a2cc99",
                                                       ifelse(Pexp$rowname=="trCVD","#e8b0d1","#a29af5"))) %>% 
  column_spec(5, color = "black", background = ifelse(Pexp$rowname %in% c("trCVD",params$s_names),"#a29af5","#a29af5")) 

```

## Non-Markovian Accumulators

-   Note that the Markovian submatrix still has rows that sum to one.
-   Also note that the accumulator captures the same transition probability that was (incorrectly) placed in the Healthy {{< fa arrow-right >}} CVD cell in lecture 2!
    -   Recall that this probability is the **marginal** probability of transition (i.e., all transitions into CVD state). So it's exactly what we want to accumulate!

```{r}
R_ <- params$mR
R <- lapply(R_, function(x) {
    tmp_ <- rbind(cbind(x, "accCVD" = c(0,0,0)),"accCVD" = c(0,0,0,0))
    tmp_["Healthy","accCVD"] = params$r_H_CVD
    tmp_
  })

params$mR <- 
  with(params,{

    r_CVD_D <- hr_CVD * r_H_D
    
    R_ <- 
      array(data = c(0, 0, 0,  
                 r_H_CVD,0, 0,
                 r_H_D,r_H_D + r_CVD_D,0,
                 r_H_D, 0,0),
          dim = c(n_states, n_states, n_treatments),
                  dimnames = list(from = s_names,
                                  to = s_names,
                                  t_names))
     R <- apply(R_,3, simplify=FALSE,function(x) {
      diag(x) = -rowSums(x)
      tmp_ <- rbind(cbind(x, "accCVD" = c(0,0,0)),"accCVD" = c(0,0,0,0))
      tmp_["Healthy","accCVD"] = x["Healthy","CVD"]
      tmp_ * cycle
    })
  R    
  })


params$mP <- 1:params$n_cycles %>% map(~(lapply(params$mR,expm)))

sim_cohort <- function(params) {
  
 params$t_names %>% map(~({ 
    tr_ <- t(c(params$n_cohort,rep(0,params$n_states))) 
    
    res <- do.call(rbind,lapply(params$mP, function(tp) {
        tr_ <<- tr_ %*% matrix(unlist(tp[[.x]]),nrow=params$n_states+1)
    }))
    
    res <- rbind(c(params$n_cohort,rep(0,params$n_states)),res) 
    dimnames(res) <- list(paste0(c(0:params$n_cycles)), c(params$s_names,"accCVD"))
    res
  })) %>% 
    set_names(params$t_names)
}
trace <- sim_cohort(params)

```

## How Many with CVD After 1 Years?

-   If we simply went based on state occupancy after one cycle, we'd understate the number of people who develop CVD.
    -   This is the number who *remain* in the CVD health state.
    -   Some had a compound transition and died within the cycle after they developed CVD!

```{r}
(trace[[1]]*100000) %>% head(n=2) %>% 
  data.frame() %>% 
  rownames_to_column() %>% 
  kable(col.names=c("cycle","Healthy","CVD","Dead","accCVD")) %>% 
  kable_styling(full_width=F) %>% 
  column_spec(c(3), background = "#a2cc99") %>% 
  column_spec(c(5), background = "#f7c6e6")
```

## How Many with CVD After 1 Years?

::: nonincremental
-   The accumulator column tells us how many *total* people developed CVD.
:::

```{r}
(trace[[1]]*100000) %>% head(n=2) %>% 
  data.frame() %>% 
  rownames_to_column() %>% 
  kable(col.names=c("cycle","Healthy","CVD","Dead","accCVD")) %>% 
  kable_styling(full_width=F) %>% 
  column_spec(c(5), background = "#f7c6e6")
```

# 2. Transition States

## Transition States

-   What if we need to count how many people *transition* to a given state in a cycle?
-   For example, we may want to apply a one-time cost to a transition such as CVD {{< fa arrow-right >}} CVD death.
-   This type of transition is not immediately captured in the Markov trace.
    -   Observed cycle-to-cycle change in death counts capture `CVD` {{< fa arrow-right >}} `CVD Death` as well as death from background causes.

## Transition States

-   Transition states are straightforward to capture as another element in the transition matrix.
-   Similar to an accumulator state, but we require state exit after one cycle.
-   **Amounts so simply zeroing out the `accCVD`** {{< fa arrow-right >}} **`accCVD` transition probability.**

## Transition States

We'll start with the original transition rate matrix:

```{r}
params$mR <- 
  with(params,{
    r_CVD_D <- hr_CVD * r_H_D
    R_ <- 
      array(data = c(0, 0, 0,  
                 r_H_CVD,0, 0,
                 r_H_D,r_H_D + r_CVD_D,0,
                 r_H_D, 0,0),
          dim = c(n_states, n_states, n_treatments),
                  dimnames = list(from = s_names,
                                  to = s_names,
                                  t_names))
    R <- apply(R_,3, simplify=FALSE,function(x) {
      diag(x) = -rowSums(x)
      x * cycle
    })
  R    
  })
```

```{r, echo = TRUE}
R_ <- params$mR[["natural_history"]]
R_
```

## Transition States

::: nonincremental
-   Next, we will add both a column *and* a row for the transition state that tracks movement into the CVD Death state.
:::

## Transition States

::: nonincremental
-   Next, we will add both a column *and* a row for the transition state that tracks movement into the CVD Death state.
-   For now, just include zeros.\
:::

```{r, echo = TRUE}
R <- 
  cbind(R_,"trCVDDeath" = c(0,0,0)) %>% 
  rbind(.,"trCVDDeath" = c(0,0,0,0))  
R
```

## Transition States

::: nonincremental
-   We then fill in the appropriate transition rate.
:::

```{r, echo = TRUE}
R["CVD","trCVDDeath"] = params$hr_CVD * params$r_H_D
R
```

## Transition States

::: nonincremental
-   Embed using matrix exponentiation to obtain the transition probability matrix.
-   Note that we need to manually zero out the transition probability that keeps people in the transition state.
:::

```{r, echo = TRUE, eval = TRUE}
#| code-line-numbers: "2"
P = expm(R)  
P["trCVDDeath","trCVDDeath"] = 0
P
```

## Transition States

```{r}
P = expm(R)  
P["trCVDDeath","trCVDDeath"] = 0

Pexp <-
  P %>%
  round(., 3) %>%
  data.frame() %>% 
  rownames_to_column()  


Pexp %>% 
  kable(col.names = c("",params$s_names,"trCVDDeath")) %>% 
  kable_styling(full_width=FALSE) %>% 
  kable_paper() %>% 
  column_spec(2:4, color ="black", background = ifelse(Pexp$rowname %in% params$s_names,"#a2cc99",
                                                       ifelse(Pexp$rowname=="trCVDDeath","#e8b0d1","#a29af5"))) %>% 
  column_spec(5, color = "black", background = ifelse(Pexp$rowname %in% c("trCVDDeath",params$s_names),"#e8b0d1","#e8b0d1")) 

```

-   Note that the Markovian submatrix still has rows that sum to one.
-   Also note that the transition state column captures transitions to death that occur from both the `Healthy` state (compound transitions) and the `CVD` state!

```{r}
R_ <- params$mR
R <- lapply(R_, function(x) {
    tmp_ <- rbind(cbind(x, "trCVDDeath" = c(0,0,0)),"trCVDDeath" = c(0,0,0,0))
    tmp_["CVD","trCVDDeath"] = params$hr_CVD * params$r_H_D
    tmp_
  })

params$mR <- 
  with(params,{

    r_CVD_D <- hr_CVD * r_H_D
    
    R_ <- 
      array(data = c(0, 0, 0,  
                 r_H_CVD,0, 0,
                 r_H_D,r_H_D + r_CVD_D,0,
                 r_H_D, 0,0),
          dim = c(n_states, n_states, n_treatments),
                  dimnames = list(from = s_names,
                                  to = s_names,
                                  t_names))
     R <- apply(R_,3, simplify=FALSE,function(x) {
      diag(x) = -rowSums(x)
      tmp_ <- rbind(cbind(x, "trCVDDeath" = c(0,0,0)),"trCVDDeath" = c(0,0,0,0))
      tmp_["CVD","trCVDDeath"] = params$hr_CVD * params$r_H_D
      tmp_ * cycle
    })
  R    
  })

params$mP <- 1:params$n_cycles %>% map(~({
  lapply(params$mR,function(x) {
    tmp_ <- expm(x)
    tmp_["trCVDDeath","trCVDDeath"] = 0
    tmp_
    })
 
  }))

sim_cohort <- function(params) {
  
 params$t_names %>% map(~({ 
    tr_ <- t(c(params$n_cohort,rep(0,params$n_states))) 
    
    res <- do.call(rbind,lapply(params$mP, function(tp) {
        tr_ <<- tr_ %*% matrix(unlist(tp[[.x]]),nrow=params$n_states+1)
    }))
    
    res <- rbind(c(params$n_cohort,rep(0,params$n_states)),res) 
    dimnames(res) <- list(paste0(c(0:params$n_cycles)), c(params$s_names,"trCVDDeath"))
    res
  })) %>% 
    set_names(params$t_names)
}
trace <- sim_cohort(params)

```

## How Many CVD Death Transitions Are There?

::: nonincremental
-   Hypothetical cohort of 100,000.
:::

-   Note how there are some deaths in the first cycle, despite everyone starting from healthy!

```{r}
tmp <- (trace[[1]]*100000) %>% head(n=2) %>% 
  data.frame() %>% 
  rownames_to_column() 
tmp %>% 
  kable(col.names=c("cycle","Healthy","CVD","Dead","trCVDDeath")) %>% 
  kable_styling(full_width=FALSE) %>% 
  column_spec(5, color ="black", background = ifelse(tmp$trCVDDeath>0,"salmon","white"))
```

## Incorporating a one-time cost

::: nonincremental
-   Can define a cost "payoff" for `trCVDDeath` and apply as usual to calculate accumulated costs from a one-time CVD death cost.
:::

```{r, echo = TRUE}
# Define the cost vector
cost_payoff = c("Healthy" = 0, "CVD" = 500, "Dead" = 0, "trCVDDeath" = 2000) 

# Sum up total costs in each cycle
costs_cycle = trace[["natural_history"]][-1,] %*% cost_payoff

# Function for cycle correction (alternative Simpson's method)
alt_simp_coef <- function(i) c(17, 59, 43, 49, rep(48, i-8), 49, 43, 59, 17) / 48
cycle_adj      <- function(x) sum(alt_simp_coef(length(x)) * x)

total_costs = cycle_adj(costs_cycle) 
total_costs
```

# 3. Tunnel States

## Tunnel States

-   Tunnel states are structured similarly to accumulators and transition states.
-   One additional complication: need to allow for tunnel state exit to background mortality (or other exit states).

## Accumulators and Transition States

-   Occupy both ends of a spectrum.
-   **Accumulators**: probability of remaining in accumulator state = 1.0.
-   **Transition States**: probability of remaining in transition state = 0.0.

## Tunnel States

-   Probability of remaining in tunnel: 0 \< p \< 1.
-   Reflects the idea that most will remain in the tunnel for the cycle, but some might leave due to secular death, transition back to a less severe disease state (e.g., remission), etc.

## Tunnel States

-   Process for constructing is similar, with a "catch."
-   We are already accounting for transitions to death in the primary Markovian submatrix.
-   But for accurate bookkeeping purposes (e.g., QALYs and costs) we still need to net them out.

## Tunnel States

-   We'll do this by including a temporary "receiving bucket" in the rate matrix.
-   The receiving bucket is used for embedding, but can be discarded for the final transition probability matrix.

## Tunnel States

-   Suppose we want to record a temporary 2 year (cycle) initial treatment cost once someone develops CVD.
-   We can set up a tunnel state to capture this.

## Tunnel State

We'll start with the original transition rate matrix:

```{r}
params$mR <- 
  with(params,{
    r_CVD_D <- hr_CVD * r_H_D
    R_ <- 
      array(data = c(0, 0, 0,  
                 r_H_CVD,0, 0,
                 r_H_D,r_H_D + r_CVD_D,0,
                 r_H_D, 0,0),
          dim = c(n_states, n_states, n_treatments),
                  dimnames = list(from = s_names,
                                  to = s_names,
                                  t_names))
    R <- apply(R_,3, simplify=FALSE,function(x) {
      diag(x) = -rowSums(x)
      x * cycle
    })
  R    
  })
R_ <- params$mR

R_
```

```{r, echo = TRUE}
R_ <- params$mR[["natural_history"]]
R_
```

## Tunnel State

-   Next, we will add columns *and* rows for the tunnel states.
-   Given that our model has an annual cycle, and the tunnel lasts two years, we need to add two columns and two rows **PLUS** a receiving bucket. So three new rows and columns.
-   If we had a monthly time cycle, we'd need to add 25 ...

## Tunnel States

::: nonincremental
-   For now, just include zeros.\
:::

```{r, echo = TRUE}
R <- 
  cbind(R_,"tunCVDy1" = c(0,0,0), "tunCVDy2" = c(0,0,0),"NULL" = c(0,0,0)) %>% 
  rbind(.,"tunCVDy1" = c(0,0,0,0,0,0), "tunCVDy2" = c(0,0,0,0,0,0), "NULL" = c(0,0,0,0,0,0))  
R
```

## Tunnel State

::: nonincremental
-   We then fill in the appropriate transition rate for entry into the tunnel.
:::

```{r, echo = TRUE}
R["Healthy","tunCVDy1"] = R["Healthy","CVD"]
R
```

## Tunnel State

::: nonincremental
-   Embed using matrix exponentiation to obtain the initial transition probability matrix.
-   Note that we need to TK
:::

```{r, echo = TRUE, eval = TRUE}
P_ = expm(R)  
P_["tunCVDy1","NULL"] = P_["CVD","Dead"]
P_["tunCVDy1","tunCVDy1"] = 0
P_["tunCVDy1","tunCVDy2"] = 1 - P_["tunCVDy1","NULL"]
P_["tunCVDy2","tunCVDy2"] = 0
P_["tunCVDy2","NULL"] = 1
P = P_[-which(rownames(P_)=="NULL"),-which(colnames(P_)=="NULL")]
P
```

## Transition States

```{r}
P_ = expm(R)  
P_["tunCVDy1","NULL"] = P_["CVD","Dead"]
P_["tunCVDy1","tunCVDy1"] = 0
P_["tunCVDy1","tunCVDy2"] = 1 - P_["tunCVDy1","NULL"]
P_["tunCVDy2","tunCVDy2"] = 0
P_["tunCVDy2","NULL"] = 1
P = P_[-which(rownames(P_)=="NULL"),-which(colnames(P_)=="NULL")]
Pexp <-
  P %>%
  round(., 3) %>%
  data.frame() %>% 
  rownames_to_column()  


Pexp %>% 
  kable(col.names = c("",params$s_names,"tunCVDy1","tunCVDy2")) %>% 
  kable_styling(full_width=FALSE) %>% 
  kable_paper() %>% 
  column_spec(2:4, color ="black", background = ifelse(Pexp$rowname %in% params$s_names,"#a2cc99",
                                                       ifelse(Pexp$rowname=="tunCVDy1","#e8b0d1","#a29af5"))) %>% 
  column_spec(5, color = "black", background = ifelse(Pexp$rowname %in% c("tunCVDy1",params$s_names),"#e8b0d1","#e8b0d1")) 

```

-   Note that the Markovian submatrix still has rows that sum to one.

```{r}
R_ <- params$mR
R <- lapply(R_, function(x) {
    tmp_ = cbind(x,"tunCVDy1" = c(0,0,0), "tunCVDy2" = c(0,0,0),"NULL" = c(0,0,0)) 
    tmp_ = rbind(tmp_,"tunCVDy1" = c(0,0,0,0,0,0), "tunCVDy2" = c(0,0,0,0,0,0), "NULL" = c(0,0,0,0,0,0))  
    tmp_["Healthy","tunCVDy1"] = tmp_["Healthy","CVD"]
    tmp_
  })

params$mR <- 
  with(params,{

    r_CVD_D <- hr_CVD * r_H_D
    
    R_ <- 
      array(data = c(0, 0, 0,  
                 r_H_CVD,0, 0,
                 r_H_D,r_H_D + r_CVD_D,0,
                 r_H_D, 0,0),
          dim = c(n_states, n_states, n_treatments),
                  dimnames = list(from = s_names,
                                  to = s_names,
                                  t_names))
     R <- apply(R_,3, simplify=FALSE,function(x) {
      diag(x) = -rowSums(x)
      tmp_ = cbind(x,"tunCVDy1" = c(0,0,0), "tunCVDy2" = c(0,0,0),"NULL" = c(0,0,0)) 
      tmp_ = rbind(tmp_,"tunCVDy1" = c(0,0,0,0,0,0), "tunCVDy2" = c(0,0,0,0,0,0), "NULL" = c(0,0,0,0,0,0))  
      tmp_["Healthy","tunCVDy1"] = tmp_["Healthy","CVD"]
      tmp_ * cycle
    })
  R    
  })

params$mP <- 1:params$n_cycles %>% map(~({
  lapply(params$mR,function(x) {
    P_ = expm(x)  
    P_["tunCVDy1","NULL"] = P_["CVD","Dead"]
    P_["tunCVDy1","tunCVDy1"] = 0
    P_["tunCVDy1","tunCVDy2"] = 1 - P_["tunCVDy1","NULL"]
    P_["tunCVDy2","tunCVDy2"] = 0
    P_["tunCVDy2","NULL"] = 1
    P = P_[-which(rownames(P_)=="NULL"),-which(colnames(P_)=="NULL")]
    P
    })
 
  }))

sim_cohort <- function(params) {
  
 params$t_names %>% map(~({ 
    tr_ <- t(c(params$n_cohort,rep(0,params$n_states+1))) 
    
    res <- do.call(rbind,lapply(params$mP, function(tp) {
        tr_ <<- tr_ %*% matrix(unlist(tp[[.x]]),nrow=params$n_states+2)
    }))
    
    res <- rbind(c(params$n_cohort,rep(0,params$n_states+1)),res) 
    dimnames(res) <- list(paste0(c(0:params$n_cycles)), c(params$s_names,"tunCVDy1","tunCVDy2"))
    res
  })) %>% 
    set_names(params$t_names)
}
trace <- sim_cohort(params)

```

# Probabilities to Rates

-   Inverse problem exists of having a transition probability model specified and needing the rates. 
-   The rate matrix does not always exist, and this is the usual case.
-   Cause: Statistical error in observation, jump over states. 
-   Two methods exist, eigenvalue method and Higham method.

## HIV Model



```{r}
m_P <- matrix(c(0.721, 0.202, 0.067, 0.010,
                0.000, 0.581, 0.407, 0.012,
                0.000, 0.000, 0.750, 0.250,
                0.000, 0.000, 0.000, 1.000), 
              nrow=4, byrow=TRUE,
              dimnames=list(c("A", "B", "C", "D"),
                            c("A", "B", "C", "D")))
m_P  
```

::: nonincremental
-  Original paper specified probabilities observed.
-  A (Healthly) -> B (cd4 < 200) -> C (AIDS) -> D (Death)
-  Note there are "jumpover" transitions. 
-  From '*Decision Modelling for Health Economic Evaluation*' by Briggs, Claxton, Sculpher.
:::

## Eigenvalue Method

```{r}
#| echo: true
V  <- eigen(m_P)$vectors
iV <- solve(V)
Ap <- iV %*% m_P %*% V
lAp <- diag(log(diag(Ap)), nrow(Ap), ncol(Ap))
R  <- V %*% lAp %*% iV
R[abs(R) < 1e-6 ] <- 0
rownames(R) <- c("A", "B", "C", "D")
colnames(R) <- c("A", "B", "C", "D")
round(R,3)
```

-  Note there is a negative rate from B -> D. 
-  This is a transition from D -> B and should be moved to the other side of the matrix.
-  Negative rates imply that identification of the closest 


## Eigenvalue Method (cont.)

```{r}
round(R, 3)
```

-  Note rates from A->C, A->D are relatively small, implying these are from statistical noise in observation.
-  `expm::logm` Higham method returns same as Eigenvalue method.

## Reestimating Rates


-  Imposition of structural assumptions and fitting to raw data would likely result in better rate estimates.
-  We could assume that a patient with HIV at this point in time only gets sicker and external causes of death are negligible. A->B->C->D constrains model.
-  We use the reported data from the paper at year 1
-  MSM Method: https://chjackson.github.io/msm/msmcourse/

## Reestimating Rates (MSM Method)


```{r}
#| echo: true
library(msm)
x <- rbind(
  # Start in state 1 at time 0.
  data.frame(
    ptnum=1:1000, years=rep(0, 1000), state=rep(1, 1000)
  ),
  # Observed at year 1 new state.
  data.frame(
    ptnum=1:1000, years=rep(1, 1000),
    state=c(rep(1, 721), rep(2, 202),
            rep(3, 67),  rep(4, 10))
  )
)
x <- x[order(x$ptnum, x$years),]

```

## Reestimating Rates (Structural Assumption)

```{r}
#| echo: true
statetable.msm(state, ptnum, data=x)
Q.init <- rbind(rbind(c(0, 0.3, 0, 0),
                      c(0, 0, 0.6, 0),
                      c(0, 0, 0, 0.3),
                      c(0, 0, 0, 0)))
```

::: nonincremental
-  Q represents structural assumptions and estimate
-  Estimates were taken from Eigenvalue method
:::

## Reestimating Rates (Likelihood Fit)

```{r}
#| echo: true
hiv.msm <- msm(state ~ years, subject = ptnum, data = x, qmatrix = Q.init)
hiv.msm
```

::: nonincremental
-  All positive.
-  Provides 95% confidence intervals for a PSA.
:::

## Reestimating Rates (Transition Probabilities)

```{r}
#| echo: true
round(pmatrix.msm(hiv.msm, t=1), 3)
m_P
```

## Conclusions

-  Identifying rate matrix from transition probability matrix in presence of error/jump over is in general not possible.
-  The matrix `log` methods can result in impossible models. 
-  Using observed data one can fit rate data using likelihood, e.g. `msm`.
-  Structural assumptions can be imposed. 
-  95% confidence intervals result. 


